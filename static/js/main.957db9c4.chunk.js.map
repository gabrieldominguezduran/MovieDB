{"version":3,"sources":["components/Header.js","components/Movie.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","text","Movie","movie","poster","Poster","Title","width","alt","src","Year","Search","useState","searchValue","setSearchValue","value","onChange","e","target","type","onClick","preventDefault","search","initialState","loading","movies","errorMessage","reducer","state","action","payload","error","App","useReducer","dispatch","useEffect","fetch","then","response","json","jsonResponse","Response","Error","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iPAUeA,G,MARA,SAACC,GACf,OACC,4BAAQC,UAAU,cACjB,4BAAKD,EAAME,SCeCC,EAjBD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACPC,EACe,QAAjBD,EAAME,OAHV,uDAGyDF,EAAME,OAC/D,OACI,yBAAKL,UAAU,SACX,4BAAKG,EAAMG,OACX,6BACI,yBACIC,MAAM,MACNC,IAAG,4BAAuBL,EAAMG,OAChCG,IAAKL,KAGb,+BAAKD,EAAMO,KAAX,OCSGC,EAxBA,SAACZ,GAAW,IAAD,EACgBa,mBAAS,IADzB,mBACfC,EADe,KACFC,EADE,KAatB,OACI,0BAAMd,UAAU,UACZ,2BACIe,MAAOF,EACPG,SAfqB,SAACC,GAC9BH,EAAeG,EAAEC,OAAOH,QAehBI,KAAK,SAET,2BAAOC,QAZY,SAACH,GACxBA,EAAEI,iBACFtB,EAAMuB,OAAOT,GAJbC,EAAe,KAcyBK,KAAK,SAASJ,MAAM,a,yjBChBpE,IACMQ,EAAe,CACjBC,SAAS,EACTC,OAAQ,GACRC,aAAc,MAEZC,EAAU,SAACC,EAAOC,GACpB,OAAQA,EAAOV,MACX,IAAK,wBACD,OAAO,EAAP,GACOS,EADP,CAEIJ,SAAS,EACTE,aAAc,OAEtB,IAAK,wBACD,OAAO,EAAP,GACOE,EADP,CAEIJ,SAAS,EACTC,OAAQI,EAAOC,UAEvB,IAAK,wBACD,OAAO,EAAP,GACOF,EADP,CAEIJ,SAAS,EACTE,aAAcG,EAAOE,QAE7B,QACI,OAAOH,IAuDJI,EApDH,WAAO,IAAD,EACYC,qBAAWN,EAASJ,GADhC,mBACPK,EADO,KACAM,EADA,KAEdC,qBAAU,WACNC,MAjCc,mDAkCTC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFN,EAAS,CACLf,KAAM,wBACNW,QAASU,EAAa7B,cAGnC,IACH,IAoBQc,EAAkCG,EAAlCH,OAAQC,EAA0BE,EAA1BF,aAAcF,EAAYI,EAAZJ,QAC9B,OACI,yBAAKxB,UAAU,OACX,kBAAC,EAAD,CAAQC,KAAK,iBACb,kBAAC,EAAD,CAAQqB,OAxBD,SAAAT,GACXqB,EAAS,CACLf,KAAM,0BAEViB,MAAM,8BAAD,OAA+BvB,EAA/B,qBACAwB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAC4B,SAA1BA,EAAaC,SACbP,EAAS,CACLf,KAAM,wBACNW,QAASU,EAAa7B,SAG1BuB,EAAS,CACLf,KAAM,wBACNY,MAAOS,EAAaE,cAUhC,uBAAG1C,UAAU,aAAb,oCACA,yBAAKA,UAAU,UACVwB,IAAYE,EACT,6CACAA,EACA,yBAAK1B,UAAU,gBAAgB0B,GAEvBD,EAAOkB,KAAI,SAACxC,EAAOyC,GAAR,OACP,kBAAC,EAAD,CAAOC,IAAG,UAAKD,EAAL,YAAczC,EAAMG,OAASH,MAAOA,UCpE1D2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.957db9c4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props) => {\r\n\treturn (\r\n\t\t<header className='App-header'>\r\n\t\t\t<h2>{props.text}</h2>\r\n\t\t</header>\r\n\t);\r\n};\r\n\r\nexport default Header;","import React from \"react\";\r\nconst DEFAULT_PLACEHOLDER_IMAGE =\r\n    \"https://cdn.browshot.com/static/images/not-found.png\";\r\nconst Movie = ({ movie }) => {\r\n    const poster =\r\n        movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\r\n    return (\r\n        <div className=\"movie\">\r\n            <h2>{movie.Title}</h2>\r\n            <div>\r\n                <img\r\n                    width=\"200\"\r\n                    alt={`The movie titled: ${movie.Title}`}\r\n                    src={poster}\r\n                />\r\n            </div>\r\n            <p>({movie.Year})</p>\r\n        </div>\r\n    );\r\n};\r\nexport default Movie;","import React, { useState } from \"react\";\r\nconst Search = (props) => {\r\n    const [searchValue, setSearchValue] = useState(\"\");\r\n    const handleSearchInputChanges = (e) => {\r\n        setSearchValue(e.target.value);\r\n    }\r\n    const resetInputField = () => {\r\n        setSearchValue(\"\")\r\n    }\r\n    const callSearchFunction = (e) => {\r\n        e.preventDefault();\r\n        props.search(searchValue);\r\n        resetInputField();\r\n    }\r\n    return (\r\n        <form className=\"search\">\r\n            <input\r\n                value={searchValue}\r\n                onChange={handleSearchInputChanges}\r\n                type=\"text\"\r\n            />\r\n            <input onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\" />\r\n        </form>\r\n    );\r\n}\r\nexport default Search;","import React, { useReducer, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./components/Header\";\r\nimport Movie from \"./components/Movie\";\r\nimport Search from \"./components/Search\";\r\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=wars&apikey=4a3b711b\";\r\nconst initialState = {\r\n    loading: true,\r\n    movies: [],\r\n    errorMessage: null\r\n};\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"SEARCH_MOVIES_REQUEST\":\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                errorMessage: null\r\n            };\r\n        case \"SEARCH_MOVIES_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                movies: action.payload\r\n            };\r\n        case \"SEARCH_MOVIES_FAILURE\":\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                errorMessage: action.error\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nconst App = () => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    useEffect(() => {\r\n        fetch(MOVIE_API_URL)\r\n            .then(response => response.json())\r\n            .then(jsonResponse => {\r\n                dispatch({\r\n                    type: \"SEARCH_MOVIES_SUCCESS\",\r\n                    payload: jsonResponse.Search\r\n                });\r\n            });\r\n    }, []);\r\n    const search = searchValue => {\r\n        dispatch({\r\n            type: \"SEARCH_MOVIES_REQUEST\"\r\n        });\r\n        fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\r\n            .then(response => response.json())\r\n            .then(jsonResponse => {\r\n                if (jsonResponse.Response === \"True\") {\r\n                    dispatch({\r\n                        type: \"SEARCH_MOVIES_SUCCESS\",\r\n                        payload: jsonResponse.Search\r\n                    });\r\n                } else {\r\n                    dispatch({\r\n                        type: \"SEARCH_MOVIES_FAILURE\",\r\n                        error: jsonResponse.Error\r\n                    });\r\n                }\r\n            });\r\n    };\r\n    const { movies, errorMessage, loading } = state;\r\n    return (\r\n        <div className=\"App\">\r\n            <Header text=\"MOVIE SEARCH\" />\r\n            <Search search={search} />\r\n            <p className=\"App-intro\">Search for your favourite movies</p>\r\n            <div className=\"movies\">\r\n                {loading && !errorMessage ? (\r\n                    <span>LOADING... </span>\r\n                ) : errorMessage ? (\r\n                    <div className=\"errorMessage\">{errorMessage}</div>\r\n                ) : (\r\n                            movies.map((movie, index) => (\r\n                                <Movie key={`${index}-${movie.Title}`} movie={movie} />\r\n                            ))\r\n                        )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}